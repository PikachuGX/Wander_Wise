{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000/api\";\n\n// Create axios instance with base URL\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Routes API service\nexport const routesService = {\n  // Calculate optimal route\n  calculateRoute: (source, destination, algorithm = \"a-star\", transportMode = \"driving\") => {\n    return apiClient.post(\"/routes/calculate\", {\n      source,\n      destination,\n      algorithm,\n      transportMode\n    });\n  },\n  // Calculate route with preferences\n  calculateRouteWithPreferences: (source, destination, preferences) => {\n    return apiClient.post(\"/routes/preferences\", {\n      source,\n      destination,\n      preferences\n    });\n  },\n  // Get offline route data\n  getOfflineRoute: routeId => {\n    return apiClient.get(`/routes/offline/${routeId}`);\n  },\n  // Save route for offline access\n  saveRouteForOffline: routeData => {\n    return apiClient.post(\"/routes/save\", routeData);\n  }\n};\n\n// Predictions API service\nexport const predictionsService = {\n  // Predict travel time\n  predictTravelTime: (source, destination, departureTime, trafficModel = \"best_guess\") => {\n    return apiClient.post(\"/predictions/travel-time\", {\n      source,\n      destination,\n      departureTime,\n      traffic: trafficModel\n    });\n  },\n  // Predict traffic conditions\n  predictTraffic: (route, time) => {\n    return apiClient.post(\"/predictions/traffic\", {\n      route,\n      time\n    });\n  },\n  // Get historical travel data\n  getHistoricalData: (source, destination, limit = 10) => {\n    return apiClient.get(\"/predictions/historical-data\", {\n      params: {\n        source,\n        destination,\n        limit\n      }\n    });\n  }\n};\n\n// Simple placeholder service for future implementation\nexport const placesService = {\n  getNearbyPlaces: (location, type, radius) => {\n    return Promise.resolve({\n      data: {\n        places: []\n      }\n    });\n  }\n};\nexport default {\n  routesService,\n  placesService,\n  predictionsService\n};","map":{"version":3,"names":["axios","API_URL","apiClient","create","baseURL","headers","routesService","calculateRoute","source","destination","algorithm","transportMode","post","calculateRouteWithPreferences","preferences","getOfflineRoute","routeId","get","saveRouteForOffline","routeData","predictionsService","predictTravelTime","departureTime","trafficModel","traffic","predictTraffic","route","time","getHistoricalData","limit","params","placesService","getNearbyPlaces","location","type","radius","Promise","resolve","data","places"],"sources":["C:/Users/ansh9/Desktop/Projects/WanderWise/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://localhost:5000/api\";\n\n// Create axios instance with base URL\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Routes API service\nexport const routesService = {\n  // Calculate optimal route\n  calculateRoute: (source, destination, algorithm = \"a-star\", transportMode = \"driving\") => {\n    return apiClient.post(\"/routes/calculate\", {\n      source,\n      destination,\n      algorithm,\n      transportMode,\n    });\n  },\n\n  // Calculate route with preferences\n  calculateRouteWithPreferences: (source, destination, preferences) => {\n    return apiClient.post(\"/routes/preferences\", {\n      source,\n      destination,\n      preferences,\n    });\n  },\n\n  // Get offline route data\n  getOfflineRoute: (routeId) => {\n    return apiClient.get(`/routes/offline/${routeId}`);\n  },\n\n  // Save route for offline access\n  saveRouteForOffline: (routeData) => {\n    return apiClient.post(\"/routes/save\", routeData);\n  },\n};\n\n// Predictions API service\nexport const predictionsService = {\n  // Predict travel time\n  predictTravelTime: (\n    source,\n    destination,\n    departureTime,\n    trafficModel = \"best_guess\"\n  ) => {\n    return apiClient.post(\"/predictions/travel-time\", {\n      source,\n      destination,\n      departureTime,\n      traffic: trafficModel,\n    });\n  },\n\n  // Predict traffic conditions\n  predictTraffic: (route, time) => {\n    return apiClient.post(\"/predictions/traffic\", {\n      route,\n      time,\n    });\n  },\n\n  // Get historical travel data\n  getHistoricalData: (source, destination, limit = 10) => {\n    return apiClient.get(\"/predictions/historical-data\", {\n      params: { source, destination, limit },\n    });\n  },\n};\n\n// Simple placeholder service for future implementation\nexport const placesService = {\n  getNearbyPlaces: (location, type, radius) => {\n    return Promise.resolve({\n      data: {\n        places: [],\n      },\n    });\n  },\n};\n\nexport default { routesService, placesService, predictionsService };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3B;EACAC,cAAc,EAAEA,CAACC,MAAM,EAAEC,WAAW,EAAEC,SAAS,GAAG,QAAQ,EAAEC,aAAa,GAAG,SAAS,KAAK;IACxF,OAAOT,SAAS,CAACU,IAAI,CAAC,mBAAmB,EAAE;MACzCJ,MAAM;MACNC,WAAW;MACXC,SAAS;MACTC;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAE,6BAA6B,EAAEA,CAACL,MAAM,EAAEC,WAAW,EAAEK,WAAW,KAAK;IACnE,OAAOZ,SAAS,CAACU,IAAI,CAAC,qBAAqB,EAAE;MAC3CJ,MAAM;MACNC,WAAW;MACXK;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAC,eAAe,EAAGC,OAAO,IAAK;IAC5B,OAAOd,SAAS,CAACe,GAAG,CAAC,mBAAmBD,OAAO,EAAE,CAAC;EACpD,CAAC;EAED;EACAE,mBAAmB,EAAGC,SAAS,IAAK;IAClC,OAAOjB,SAAS,CAACU,IAAI,CAAC,cAAc,EAAEO,SAAS,CAAC;EAClD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG;EAChC;EACAC,iBAAiB,EAAEA,CACjBb,MAAM,EACNC,WAAW,EACXa,aAAa,EACbC,YAAY,GAAG,YAAY,KACxB;IACH,OAAOrB,SAAS,CAACU,IAAI,CAAC,0BAA0B,EAAE;MAChDJ,MAAM;MACNC,WAAW;MACXa,aAAa;MACbE,OAAO,EAAED;IACX,CAAC,CAAC;EACJ,CAAC;EAED;EACAE,cAAc,EAAEA,CAACC,KAAK,EAAEC,IAAI,KAAK;IAC/B,OAAOzB,SAAS,CAACU,IAAI,CAAC,sBAAsB,EAAE;MAC5Cc,KAAK;MACLC;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAC,iBAAiB,EAAEA,CAACpB,MAAM,EAAEC,WAAW,EAAEoB,KAAK,GAAG,EAAE,KAAK;IACtD,OAAO3B,SAAS,CAACe,GAAG,CAAC,8BAA8B,EAAE;MACnDa,MAAM,EAAE;QAAEtB,MAAM;QAAEC,WAAW;QAAEoB;MAAM;IACvC,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAG;EAC3BC,eAAe,EAAEA,CAACC,QAAQ,EAAEC,IAAI,EAAEC,MAAM,KAAK;IAC3C,OAAOC,OAAO,CAACC,OAAO,CAAC;MACrBC,IAAI,EAAE;QACJC,MAAM,EAAE;MACV;IACF,CAAC,CAAC;EACJ;AACF,CAAC;AAED,eAAe;EAAEjC,aAAa;EAAEyB,aAAa;EAAEX;AAAmB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}